---
- hosts: services_machine

  remote_user: "{{ remote_user_id }}"
  become: true
  
  tasks:
     - name: Delete applications folder
       file: 
           path={{ install_apps_folder }}/{{ item.name }}
           state=absent 
           owner={{ remote_user_id }} 
           group={{ remote_user_id }} 
           backup=yes
       with_items: "{{ applicationsEsiee }}"
       
     - name: Create applications folder
       file: 
           path={{ install_apps_folder }}/{{ item.name }}
           state=directory 
           owner={{ remote_user_id }} 
           group={{ remote_user_id }} 
           recurse=yes
           backup=yes
       with_items: "{{ applicationsEsiee }}"
       
     - name: Deploying applications
       unarchive: 
           src={{ artifactory_repo_url }}/{{item.package}} 
           dest={{ install_apps_folder }}/{{ item.name }}
           remote_src=yes
           owner={{ remote_user_id }} 
           group={{ remote_user_id }} 
       with_items: "{{ applicationsEsiee }}"
     
     - name: Configuring applications port
       lineinfile: 
            dest={{ install_apps_folder }}/{{ item.name }}/conf/application.properties 
            regexp='^.*server\.port.*$' 
            line='server.port={{ item.port }}' 
            owner={{ remote_user_id }} group={{ remote_user_id }}
       with_items: "{{ applicationsEsiee }}"

     - name: Configuring applications contact point
       lineinfile: 
            dest={{ install_apps_folder }}/{{ item.name }}/conf/application.properties 
            regexp='^.*cluster_contact_point.*$' 
            line='cluster_contact_point={{ item.cluster_contact_point }}' 
            owner={{ remote_user_id }} group={{ remote_user_id }}
       with_items: "{{ applicationsEsiee }}"
       
     - name: Configuring applications keyspace
       lineinfile: 
            dest={{ install_apps_folder }}/{{ item.name }}/conf/application.properties 
            regexp='^.*application_keyspace.*$' 
            line='application_keyspace={{ item.application_keyspace }}' 
            owner={{ remote_user_id }} group={{ remote_user_id }}
       with_items: "{{ applicationsEsiee }}"
     
     - name: Create applications logs folder if not existing
       file: 
           path={{ logs_files_floder }}/{{ item.name }}/logs
           state=directory 
           owner={{ remote_user_id }} 
           group={{ remote_user_id }} 
           recurse=yes
       with_items: "{{ applicationsEsiee }}"
       
     - name: Configuring applications logs
       replace: 
            dest={{ install_apps_folder }}/{{ item.name }}/conf/log4j2.xml 
            regexp='\$\{logDirPath\}' 
            replace='{{ logs_files_floder }}/{{ item.name }}/logs/{{ item.name }}.log' 
            owner={{ remote_user_id }} 
            group={{ remote_user_id }}
       with_items: "{{ applicationsEsiee }}"

     - name: Configuring applications logs level
       replace: 
            dest={{ install_apps_folder }}/{{ item.name }}/conf/log4j2.xml 
            regexp='\$\{logLevel\}' 
            replace={{item.logLevel}} 
            owner={{ remote_user_id }} 
            group={{ remote_user_id }}
       with_items: "{{ applicationsEsiee }}"
